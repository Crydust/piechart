{"version":3,"sources":["webpack:///webpack/bootstrap 21de3d9c1873e308d882","webpack:///./src/geometry.js","webpack:///./src/drawing.js","webpack:///./src/piechart.js","webpack:///./src/colors.js","webpack:///./src/datelinechart.js","webpack:///./src/dataset.js","webpack:///./src/axis.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","degrees","result","Math","PI","Point","[object Object]","x","y","this","getX","getY","r","a","cos","sin","__webpack_exports__","Rect","top","left","width","height","tl","br","getRight","getLeft","getBottom","getTop","right","bottom","subTop","getHeight","subHeight","subLeft","getWidth","subWidth","replace","toFixed","canvas_","ctx_","document","createElement","getContext","shape","coords_arr","strokewidth","stroke","strokealpha","fill","fillalpha","leni","beginPath","moveTo","length","lineTo","arc","w","h","rect","startPoint","__WEBPACK_IMPORTED_MODULE_1__geometry_js__","polar","translate","closePath","fillStyle","__WEBPACK_IMPORTED_MODULE_0__colors_js__","strokeStyle","lineWidth","textToDraw","font","textAlign","textBaseline","fillText","container","appendChild","id","values","labels","themeColors","center","__WEBPACK_IMPORTED_MODULE_0__geometry_js__","outerRadius","min","total","parseInt","wedges","start","j","lenj","fillColor","wedge","Wedge","getEnd","push","__WEBPACK_IMPORTED_MODULE_1__drawing_js__","createGraphics","drawShape","k","lenk","draw","renderGraphics","getElementById","value","label","textFill","start_","value_","label_","center_","radius_","stroke_","fill_","textFill_","getMiddleAlpha","alpha","getStartAlpha","getEndAlpha","p1","getLineStartPosition","p2","getLineEndPosition","p3","getTextPosition","hexColor","color","substr","g","b","rawdatasets","rootRect","plotAreaRect","subRect","legendRect","datasets","__WEBPACK_IMPORTED_MODULE_1__dataset_js__","minYValue","getMinYValue","maxYValue","getMaxYValue","deltaYValue","xAxis","__WEBPACK_IMPORTED_MODULE_2__axis_js__","getMinDate","getMaxDate","yAxis","__WEBPACK_IMPORTED_MODULE_3__drawing_js__","drawRect","yCount","xCount","labelPixels","floor","labelText","drawGrid","getCount","drawDataSetValues","getItem","getValues","drawLegend","getName","coordinates","valueToPixels","index","count","lineCoordinates","DataSet","dateValues","yValues","_name","_dateValues","_yValues","minDate","Date","UTC","maxDate","date","getUTCFullYear","getUTCMonth","getExtremeDates","yValue","ceil","getExtremeYValues","_datasets","Name","rawDateValues","DateValues","split","rawDateValueParts","year","month","day","rawYValues","YValues","parseFloat","extremes","max","NumericAxis","minimumPixels","maximumPixels","minimumValue","maximumValue","_minimumPixels","_maximumPixels","_pixelLength","_minimumValue","_maximumValue","labelValue","super","epoch","round","getUTCDate","join"],"mappings":"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","file":"index.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 21de3d9c1873e308d882","export class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    getX() {\n        return this.x;\n    }\n    getY() {\n        return this.y;\n    }\n    translate(x, y) {\n        if (x instanceof Point) {\n            return new Point(this.x + x.getX(), this.y + x.getY());\n        }\n        return new Point(this.x + x, this.y + y);\n    }\n    static polar (r, a) {\n        return new Point(Math.cos(a) * r, Math.sin(a) * r);\n    }\n}\n\nexport class Rect {\n    constructor(top, left, width, height) {\n        if (left instanceof Point && top instanceof Point) {\n            this.tl = top;\n            this.br = left;\n        } else {\n            this.tl = new Point(left, top);\n            this.br = new Point(left + width, top + height);\n        }\n    }\n    getLeft() {\n        return this.tl.getX();\n    }\n    getTop() {\n        return this.tl.getY();\n    }\n    getRight() {\n        return this.br.getX();\n    }\n    getBottom() {\n        return this.br.getY();\n    }\n    getWidth() {\n        return this.getRight() - this.getLeft();\n    }\n    getHeight() {\n        return this.getBottom() - this.getTop();\n    }\n    subRect(top, right, bottom, left) {\n        var subTop = this.getTop() + ((1 - top) * this.getHeight());\n        var subHeight = this.getHeight() * (top - bottom);\n        var subLeft = this.getLeft() + (left * this.getWidth());\n        var subWidth = (right - left) * this.getWidth();\n        return new Rect(subTop, subLeft, subWidth, subHeight);\n    }\n    toString() {\n        return 'Rect { top: %s, left: %s, width: %s, height: %s}'\n            .replace('%s', this.getTop().toFixed(1))\n            .replace('%s', this.getLeft().toFixed(1))\n            .replace('%s', this.getWidth().toFixed(1))\n            .replace('%s', this.getHeight().toFixed(1));\n    }\n}\n\nexport function toRad(degrees) {\n    var result = (degrees * Math.PI / 180) % (Math.PI * 2);\n    if (result < 0) {\n        result += (Math.PI * 2);\n    }\n    return result;\n}\n\nexport function toDeg(radians) {\n    var result = (radians * 180 / Math.PI) % 360;\n    if (result < 0) {\n        result += 360;\n    }\n    return result;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/geometry.js\n// module id = 0\n// module chunks = 0","import {hexToRgba} from './colors.js';\nimport {Point} from './geometry.js';\n\nexport class CanvasDrawing {\n\n    /**\n     * @constructor\n     * @implements {var IDrawing}\n     */\n    constructor() {\n        this.canvas_ = null;\n        this.ctx_ = null;\n    }\n\n    /**\n     * encapsulates the creation of the 'magical' object\n     * @param {!number} width\n     * @param {!number} height\n     */\n    createGraphics(width, height) {\n        this.canvas_ = document.createElement('canvas');\n        this.canvas_.width = width;\n        this.canvas_.height = height;\n        this.ctx_ = this.canvas_.getContext('2d');\n    }\n\n    /**\n     * draws a single shape\n     * @param {!string} shape\n     * @param {!Array.<number>} coords_arr\n     * @param {!number} strokewidth integer strokewidth\n     * @param {!string} stroke hexadecimal color #123456\n     * @param {!number} strokealpha float [0, 1] 0 is transparent, 1 is opaque\n     * @param {!string} fill hexadecimal color #123456\n     * @param {!number} fillalpha float [0, 1] 0 is transparent, 1 is opaque\n     */\n    drawShape(shape, coords_arr, strokewidth, stroke, strokealpha, fill, fillalpha) {\n        var i, leni;\n        if (!(fillalpha > 0  || (strokealpha > 0 && strokewidth > 0))) {\n            return;\n        }\n        this.ctx_.beginPath();\n        switch (shape) {\n        case 'poly':\n            //closed polygon\n            this.ctx_.moveTo(coords_arr[0], coords_arr[1]);\n            for (i = 0, leni = coords_arr.length; i < leni; i += 2) {\n                this.ctx_.lineTo(coords_arr[i], coords_arr[i + 1]);\n            }\n            this.ctx_.lineTo(coords_arr[0], coords_arr[1]);\n            break;\n        case 'polyline':\n            //open polygon\n            this.ctx_.moveTo(coords_arr[0], coords_arr[1]);\n            for (i = 0, leni = coords_arr.length; i < leni; i += 2) {\n                this.ctx_.lineTo(coords_arr[i], coords_arr[i + 1]);\n            }\n            break;\n        case 'circle':\n            this.ctx_.moveTo(coords_arr[0] + coords_arr[2], coords_arr[1]);\n            this.ctx_.arc(coords_arr[0], coords_arr[1], coords_arr[2], 0, Math.PI * 2, false);\n            break;\n        case 'rect':\n            var x = coords_arr[0];\n            var y = coords_arr[1];\n            var w = coords_arr[2] - x;\n            var h = coords_arr[3] - y;\n            if (strokewidth % 2 === 1) {\n                x += 0.5;\n                y += 0.5;\n            }\n            this.ctx_.rect(x, y, w, h);\n            break;\n        case 'arc':\n            //center\n            var startPoint = Point\n                    .polar(coords_arr[2], coords_arr[3])\n                    .translate(coords_arr[0], coords_arr[1]);\n            this.ctx_.moveTo(coords_arr[0], coords_arr[1]);\n            this.ctx_.lineTo(startPoint.getX(), startPoint.getY());\n            this.ctx_.arc(coords_arr[0], coords_arr[1], coords_arr[2], coords_arr[3], coords_arr[4], false);\n            this.ctx_.lineTo(coords_arr[0], coords_arr[1]);\n            break;\n        }\n        if (shape !== 'polyline') {\n            this.ctx_.closePath();\n        }\n        if (fillalpha > 0) {\n            this.ctx_.fillStyle = hexToRgba(fill, fillalpha);\n            this.ctx_.fill();\n        }\n        if (strokealpha > 0 && strokewidth > 0) {\n            this.ctx_.strokeStyle = hexToRgba(stroke, strokealpha);\n            this.ctx_.lineWidth = strokewidth;\n            this.ctx_.stroke();\n        }\n    }\n\n    fillText(textToDraw, x, y, fill, fillalpha, font, textAlign, textBaseline) {\n        this.ctx_.textAlign = textAlign || 'start';\n        this.ctx_.textBaseline = textBaseline || 'alphabetic';\n        this.ctx_.font = font;\n        this.ctx_.fillStyle = hexToRgba(fill, fillalpha);\n        this.ctx_.fillText(textToDraw, x, y);\n    }\n\n    /**\n     * ends the drawing and adds it to the dom\n     * @param {HTMLElement} container\n     */\n    renderGraphics(container) {\n        container.appendChild(this.canvas_);\n        delete this.canvas_;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/drawing.js\n// module id = 1\n// module chunks = 0","import {Point, toRad} from './geometry.js';\nimport {CanvasDrawing} from './drawing.js';\n\nclass Wedge {\n\n    constructor(start, value, label, center, outerRadius, stroke, fill, textFill) {\n        this.start_ = start;\n        this.value_ = value;\n        this.label_ = label;\n        this.center_ = center;\n        this.radius_ = (outerRadius - 32) / 1.1;\n        this.stroke_ = stroke;\n        this.fill_ = fill;\n        this.textFill_ = textFill;\n    }\n    getEnd() {\n        return this.start_ + this.value_;\n    }\n    getStartAlpha() {\n        return toRad(this.getEnd() * -360);\n    }\n    getMiddleAlpha() {\n        return toRad((this.start_ + this.getEnd()) / 2 * -360);\n    }\n    getEndAlpha() {\n        return toRad(this.start_ * -360);\n    }\n    getLineStartPosition() {\n        return Point\n                .polar(this.radius_ * 0.7, this.getMiddleAlpha())\n                .translate(this.center_);\n    }\n    getLineEndPosition() {\n        return Point\n                .polar(this.radius_ * 1.1, this.getMiddleAlpha())\n                .translate(this.center_);\n    }\n    getTextPosition() {\n        var alpha = this.getMiddleAlpha();\n        var p = Point\n                .polar((this.radius_ * 1.1) + 16, alpha)\n                .translate(this.center_)\n                .translate(-6 * this.label_.length, 6);\n        if (this.label_.length > 2) {\n            if (alpha < 0.2 * Math.PI || alpha > 1.8 * Math.PI) {\n                p = p.translate(6 * (this.label_.length - 2), 0);\n            } else if (alpha > 0.8 * Math.PI && alpha < 1.2 * Math.PI) {\n                p = p.translate(-6 * (this.label_.length - 2), 0);\n            }\n        }\n        return p;\n    }\n    draw(d) {\n        var strokewidth, stroke, strokealpha, fill, fillalpha;\n\n        strokewidth = 0;\n        stroke = '#000000';\n        strokealpha = 0;\n        fill = this.fill_;\n        fillalpha = 1;\n        //x, y, radius, startAngle, endAngle\n        d.drawShape(\n                'arc',\n                [this.center_.getX(), this.center_.getY(), this.radius_, this.getStartAlpha(), this.getEndAlpha()],\n                strokewidth, stroke, strokealpha,\n                fill, fillalpha);\n\n        strokewidth = 1;\n        stroke = this.stroke_;\n        strokealpha = 1;\n        fill = '#000000';\n        fillalpha = 0;\n        //x1, y1, x2, y2, ...\n        var p1 = this.getLineStartPosition();\n        var p2 = this.getLineEndPosition();\n        d.drawShape(\n                'polyline',\n                [p1.getX(), p1.getY(), p2.getX(), p2.getY()],\n                strokewidth, stroke, strokealpha,\n                fill, fillalpha);\n\n        strokewidth = 0;\n        stroke = this.stroke_;\n        strokealpha = 0;\n        fill = this.textFill_;\n        fillalpha = 1;\n        var p3 = this.getTextPosition();\n        d.fillText(this.label_, p3.getX(), p3.getY(), fill, fillalpha, '16px sans-serif');\n    }\n}\n\nexport function draw(id, width, height, values, labels) {\n    \n    var themeColors = [\n        //?        ?          text       line\n        '#ffffff', '#eeeeee', '#121212', '#dddddd',\n        '#fff4d6', '#d7bad6', '#a1bbee', '#c0c1a1',\n        '#f0cbae', '#958f91', '#bfa9ac', '#f8e9be',\n        '#c8c8c8', '#a1bbee'\n    ];\n    var center = new Point(width / 2, height  / 2);\n    var outerRadius = Math.min(width, height) / 2;\n    \n    var total = 0;\n    for (var i = 0, leni = values.length; i < leni; i++) {\n        if (typeof values[i] === 'string') {\n            values[i] = parseInt(values[i], 10);\n        }\n        total += values[i];\n    }\n    if (total < 0.001) {\n        return;\n    }\n    var wedges = [];\n    var start = 0;\n    for (var j = 0, lenj = values.length; j < lenj; j++) {\n        var fillColor = themeColors[(j % (themeColors.length - 4)) + 4];\n        var wedge = new Wedge(start, values[j] / total, labels[j], center, outerRadius, themeColors[3], fillColor, themeColors[2]);\n        start = wedge.getEnd();\n        wedges.push(wedge);\n    }\n    \n    var strokewidth = 0, stroke = '#000000', strokealpha = 0, fill = '#eeeeff', fillalpha = 1;\n    var d = new CanvasDrawing();\n    d.createGraphics(width, height);\n    d.drawShape('rect', [0, 0, width, height],\n            strokewidth, stroke, strokealpha, fill, fillalpha);\n    for (var k = 0, lenk = wedges.length; k < lenk; k++) {\n        wedges[k].draw(d);\n    }\n    d.renderGraphics(document.getElementById(id));\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/piechart.js\n// module id = 3\n// module chunks = 0","/**\n * @private\n * @param {!string} hexColor\n * @param {!number} alpha\n * @returns {!string}\n */\nexport function hexToRgba(hexColor, alpha) {\n    var color = parseInt(hexColor.substr(1, 6), 16);\n    var r = (color >> 16) & 0xFF;\n    var g = (color >> 8) & 0xFF;\n    var b = color & 0xFF;\n    /*\n     var r = parseInt(hexColor.substr(1, 2), 16);\n     var g = parseInt(hexColor.substr(3, 2), 16);\n     var b = parseInt(hexColor.substr(5, 2), 16);\n     */\n    if (alpha < 1) {\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + alpha + ')';\n    }\n    return 'rgb(' + r + ',' + g + ',' + b + ')';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/colors.js\n// module id = 4\n// module chunks = 0","import {Rect} from './geometry.js';\nimport {DataSetCollection} from './dataset.js';\nimport {NumericAxis, DateAxis} from './axis.js';\nimport {CanvasDrawing} from './drawing.js';\n\nfunction drawRect(d, rect, strokewidth, stroke, strokealpha, fill, fillalpha) {\n    d.drawShape('rect', [rect.getLeft(), rect.getTop(), rect.getRight(), rect.getBottom()],\n            strokewidth, stroke, strokealpha, fill, fillalpha);\n}\n\nfunction drawGrid(d, rect, xAxis, xCount, yAxis, yCount,\n        strokewidth, stroke, strokealpha, fill, fillalpha) {\n    var i;\n    var top = rect.getTop();\n    var right = rect.getRight();\n    var bottom = rect.getBottom();\n    var left = rect.getLeft();\n    // background\n    d.drawShape('rect', [rect.getLeft(), rect.getTop(), rect.getRight(), rect.getBottom()],\n            0, '#000000', 0, fill, fillalpha);\n    // vertical stripes\n    for (i = 0; i <= xCount; i++) {\n        var x = xAxis.labelPixels(i, xCount);\n        d.drawShape('polyline', [Math.floor(x) + 0.5, Math.floor(top) + 0.5, Math.floor(x) + 0.5, Math.floor(bottom) + 5 + 0.5],\n                strokewidth, stroke, strokealpha, fill, fillalpha);\n        d.fillText(xAxis.labelText(i, xCount), x, bottom + 20,\n                '#000000', 1, '16px sans-serif', 'center', 'top');\n    }\n    // horizontal stripes\n    for (i = 0; i <= yCount; i++) {\n        var y = yAxis.labelPixels(i, yCount);\n        d.drawShape('polyline', [Math.floor(left) - 5 + 0.5, Math.floor(y) + 0.5, Math.floor(right) + 0.5, Math.floor(y) + 0.5],\n                strokewidth, stroke, strokealpha, fill, fillalpha);\n        d.fillText(yAxis.labelText(i, yCount), left - 10, y,\n                '#000000', 1, '16px sans-serif', 'right', 'middle');\n    }\n\n}\n\nfunction drawDataSetValues(d, values, xAxis, yAxis,\n        strokewidth, stroke, strokealpha, fill, fillalpha) {\n    var i, leni, coordinates;\n    coordinates = [];\n    if (values.length === 1) {\n        strokewidth += 2;\n        coordinates.push(\n                xAxis.valueToPixels(values[0].x) - 2,\n                yAxis.valueToPixels(values[0].y),\n                xAxis.valueToPixels(values[0].x) + 2,\n                yAxis.valueToPixels(values[0].y));\n    } else {\n        for (i = 0, leni = values.length; i < leni; i++) {\n            coordinates.push(\n                    xAxis.valueToPixels(values[i].x),\n                    yAxis.valueToPixels(values[i].y));\n        }\n    }\n    d.drawShape('polyline', coordinates,\n            strokewidth, stroke, strokealpha, fill, fillalpha);\n}\n\nfunction drawLegend(d, name, index, count, legendRect,\n        strokewidth, stroke, strokealpha, fill, fillalpha) {\n    var lineCoordinates = [\n        legendRect.getLeft() + 5,\n        legendRect.getBottom() - (20 * (count - index)),\n        legendRect.getLeft() + 5 + 16,\n        legendRect.getBottom() - (20 * (count - index))\n    ];\n    d.drawShape('polyline', lineCoordinates,\n            strokewidth, stroke, strokealpha, fill, fillalpha);\n    d.fillText(name,\n            legendRect.getLeft() + 5 + 16 + 5,\n            legendRect.getBottom() - (20 * (count - index)),\n            '#000000', 1, '16px sans-serif', 'left', 'middle');\n}\n\nexport function draw(id, width, height, rawdatasets) {\n    var i, leni;\n    var themeColors = [\n        //?        ?          text       line\n        '#ffffff', '#dddddd', '#000000', '#cccccc',\n        '#284b53', '#b8bc9c', '#005699', '#271651',\n        '#aa0036', '#ecf0b9', '#999966', '#333366',\n        '#c3c3e6', '#594330', '#a0bdc4', '#005699',\n        '#999966', '#213321', '#0f3b9c'\n    ];\n\n    var rootRect = new Rect(0, 0, width, height);\n    var plotAreaRect = rootRect.subRect(0.95, 0.7, 0.2, 0.1);\n    var legendRect = rootRect.subRect(0.95, 0.99, 0.2, 0.7);\n\n    var datasets = new DataSetCollection(rawdatasets);\n    var minYValue = datasets.getMinYValue();\n    var maxYValue = datasets.getMaxYValue();\n    var deltaYValue = maxYValue - minYValue;\n    var xAxis = new DateAxis(\n            plotAreaRect.getLeft(), plotAreaRect.getRight(),\n            datasets.getMinDate(), datasets.getMaxDate()\n            );\n    var yAxis = new NumericAxis(\n            plotAreaRect.getBottom(), plotAreaRect.getTop(),\n            minYValue, maxYValue\n            );\n\n    var strokewidth = 0, stroke = '#000000', strokealpha = 0, fill = '#eeeeff', fillalpha = 1;\n    var d = new CanvasDrawing();\n    d.createGraphics(width, height);\n    drawRect(d, rootRect, strokewidth, stroke, strokealpha, fill, fillalpha);\n    fill = '#ffffff';\n    stroke = '#cccccc';\n    strokewidth = 1;\n    strokealpha = 1;\n    var yCount = 5;\n    if (deltaYValue % 7 === 0) {\n        yCount = 7;\n    } else if (deltaYValue % 6 === 0) {\n        yCount = 6;\n    } else if (deltaYValue % 5 === 0) {\n        yCount = 5;\n    } else if (deltaYValue % 4 === 0) {\n        yCount = 4;\n    } else if (deltaYValue % 3 === 0) {\n        yCount = 3;\n    }\n    drawGrid(d, plotAreaRect, xAxis, 3, yAxis, yCount,\n            strokewidth, stroke, strokealpha, fill, fillalpha);\n\n    fillalpha = 0;\n    strokewidth = 2;\n    strokealpha = 1;\n    for (i = datasets.getCount() - 1; i >= 0; i--) {\n        stroke = themeColors[4 + i];\n        drawDataSetValues(d, datasets.getItem(i).getValues(), xAxis, yAxis,\n                strokewidth, stroke, strokealpha, fill, fillalpha);\n    }\n\n    for (i = 0, leni = datasets.getCount(); i < leni; i++) {\n        stroke = themeColors[4 + i];\n        drawLegend(d, datasets.getItem(i).getName(), i, leni, legendRect,\n                strokewidth, stroke, strokealpha, fill, fillalpha);\n    }\n\n    d.renderGraphics(document.getElementById(id));\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/datelinechart.js\n// module id = 5\n// module chunks = 0","export class DataSet {\n    \n    constructor(name, dateValues, yValues) {\n        this._name = name;\n        this._dateValues = dateValues;\n        this._yValues = yValues;\n    }\n    getExtremeDates() {\n        var i, leni;\n        var minDate = Date.UTC(2100, 0, 1, 0, 0, 0, 0);\n        var maxDate = Date.UTC(1970, 0, 1, 0, 0, 0, 0);\n        for (i = 0, leni = this._dateValues.length; i < leni; i++) {\n            var date = this._dateValues[i];\n            if (date < minDate) {\n                minDate = date;\n            }\n            if (date > maxDate) {\n                maxDate = date;\n            }\n        }\n        //console.log(new Date(minDate), new Date(maxDate));\n        minDate = Date.UTC(new Date(minDate).getUTCFullYear(), new Date(minDate).getUTCMonth(), 1, 0, 0, 0, 0);\n        if (new Date(maxDate).getUTCMonth() === 11) {\n            maxDate = Date.UTC(new Date(maxDate).getUTCFullYear() + 1, 0, 1, 0, 0, 0, 0);\n        } else {\n            maxDate = Date.UTC(new Date(maxDate).getUTCFullYear(), new Date(maxDate).getUTCMonth() + 1, 1, 0, 0, 0, 0);\n        }\n        return [minDate, maxDate];\n    }\n    getMinDate() {\n        return this.getExtremeDates()[0];\n    }\n    getMaxDate() {\n        return this.getExtremeDates()[1];\n    }\n    getExtremeYValues() {\n        var i, leni;\n        var minYValue = 1000000;\n        var maxYValue = -1000000;\n        for (i = 0, leni = this._yValues.length; i < leni; i++) {\n            var yValue = this._yValues[i];\n            if (yValue < minYValue) {\n                minYValue = yValue;\n            }\n            if (yValue > maxYValue) {\n                maxYValue = yValue;\n            }\n            //console.log('yyy', minYValue, yValue, maxYValue);\n        }\n        if (minYValue >= 0 && minYValue < 1) {\n            minYValue = 0;\n        } else {\n            minYValue = Math.floor(minYValue - 0.5);\n        }\n        if (maxYValue > 9 && maxYValue <= 10) {\n            maxYValue = 10;\n        } else {\n            maxYValue = Math.ceil(maxYValue + 0.5);\n        }\n        return [minYValue, maxYValue];\n    }\n    getMinYValue() {\n        return this.getExtremeYValues()[0];\n    }\n    getMaxYValue() {\n        return this.getExtremeYValues()[1];\n    }\n    getName() {\n        return this._name;\n    }\n    getValues() {\n        var i, leni;\n        var result = [];\n        for (i = 0, leni = this._dateValues.length; i < leni; i++) {\n            result.push({\n                x: this._dateValues[i],\n                y: this._yValues[i]\n            });\n        }\n        return result;\n    }\n\n}\n\nexport class DataSetCollection {\n    constructor(rawdatasets) {\n        var i, leni, j, lenj;\n        this._datasets = [];\n        for (i = 0, leni = rawdatasets.length; i < leni; i++) {\n            var name = rawdatasets[i].Name;\n            var dateValues = [];\n            var rawDateValues = rawdatasets[i].DateValues.split(',');\n            for (j = 0, lenj = rawDateValues.length; j < lenj; j++) {\n                var rawDateValueParts = rawDateValues[j].split('/');\n                var year = parseInt(rawDateValueParts[2], 10);\n                if (year < 70) {\n                    year = 2000 + year;\n                } else if (year < 100) {\n                    year = 1900 + year;\n                }\n                var month = parseInt(rawDateValueParts[1], 10) - 1;\n                var day = parseInt(rawDateValueParts[0], 10);\n                //console.log(rawDateValues[j], year, month, day);\n                dateValues.push(Date.UTC(year, month, day, 0, 0, 0, 0));\n            }\n            var yValues = [];\n            var rawYValues = rawdatasets[i].YValues.split(',');\n            for (j = 0, lenj = rawYValues.length; j < lenj; j++) {\n                var yValue = parseFloat(rawYValues[j]);\n                //console.log(rawYValues[j], yValue);\n                yValues.push(yValue);\n            }\n            this._datasets.push(new DataSet(name, dateValues, yValues));\n        }\n    }\n    getExtremeDates() {\n        var i, leni;\n        var minDate = Date.UTC(2100, 0, 1, 0, 0, 0, 0);\n        var maxDate = Date.UTC(1970, 0, 1, 0, 0, 0, 0);\n        for (i = 0, leni = this._datasets.length; i < leni; i++) {\n            var extremes = this._datasets[i].getExtremeDates();\n            minDate = Math.min(minDate, extremes[0]);\n            maxDate = Math.max(maxDate, extremes[1]);\n        }\n        return [minDate, maxDate];\n    }\n    getMinDate() {\n        return this.getExtremeDates()[0];\n    }\n    getMaxDate() {\n        return this.getExtremeDates()[1];\n    }\n    getExtremeYValues() {\n        var i, leni;\n        var minYValue = 1000000;\n        var maxYValue = -1000000;\n        for (i = 0, leni = this._datasets.length; i < leni; i++) {\n            var extremes = this._datasets[i].getExtremeYValues();\n            minYValue = Math.min(minYValue, extremes[0]);\n            maxYValue = Math.max(maxYValue, extremes[1]);\n        }\n        return [minYValue, maxYValue];\n    }\n    getMinYValue() {\n        return this.getExtremeYValues()[0];\n    }\n    getMaxYValue() {\n        return this.getExtremeYValues()[1];\n    }\n    getCount() {\n        return this._datasets.length;\n    }\n    getItem(index) {\n        return this._datasets[index];\n    }\n    \n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/dataset.js\n// module id = 6\n// module chunks = 0","export class NumericAxis {\n    constructor(minimumPixels, maximumPixels, minimumValue, maximumValue) {\n        this._minimumPixels = minimumPixels;\n        this._maximumPixels = maximumPixels;\n        this._pixelLength = maximumPixels - minimumPixels;\n        this._minimumValue = minimumValue;\n        this._maximumValue = maximumValue;\n    }\n    valueToPixels(value) {\n        return this._minimumPixels + this._pixelLength *\n                (value - this._minimumValue) /\n                (this._maximumValue - this._minimumValue);\n    }\n    labelPixels(index, count) {\n        return this._minimumPixels + this._pixelLength * index / count;\n    }\n    labelValue(index, count) {\n        return (this._minimumValue +\n                ((this._maximumValue - this._minimumValue) *\n                index / count));\n    }\n    labelText(index, count) {\n        return this.labelValue(index, count).toFixed(1);\n    }\n}\n\nexport class DateAxis extends NumericAxis {\n    constructor(minimumPixels, maximumPixels, minimumValue, maximumValue) {\n        super(minimumPixels, maximumPixels, minimumValue, maximumValue);\n    }\n    labelText(index, count) {\n        var epoch = Math.round(this.labelValue(index, count));\n        var date = new Date(epoch);\n        var d = date.getUTCDate();\n        var m = date.getUTCMonth() + 1;\n        var y = date.getUTCFullYear() % 100;\n        d = d < 10 ? '0' + d : d;\n        m = m < 10 ? '0' + m : m;\n        y = y < 10 ? '0' + y : y;\n        return [d, m, y].join('/');\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/axis.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}